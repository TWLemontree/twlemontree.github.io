<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>抬头看见柠檬树的博客</title>
  
  <subtitle>懒癌患者晚期</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-27T07:52:44.431Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>抬头看见柠檬树</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python笔记-通过__slots__变量限制实例的属性</title>
    <link href="http://yoursite.com/2018/02/26/python-%E9%80%9A%E8%BF%87-slots-%E5%8F%98%E9%87%8F%E9%99%90%E5%88%B6%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <id>http://yoursite.com/2018/02/26/python-通过-slots-变量限制实例的属性/</id>
    <published>2018-02-27T07:50:46.000Z</published>
    <updated>2018-02-27T07:52:44.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python 是一门动态语言，当我们定义一个类，并创建了一个类的实例后，我们可以给该实例绑定任何属性和方法。然而某些情况下，我们并不想这样。假设我们定义了一个鸵鸟类，别人在使用他时添加了一个“飞”的方法，或者“会飞”的属性，这显然是不合理的。我们需要对实例进行一些限制，使其不能随心所欲的添加属性或者方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 演示程序，python的实例对象可以随心所欲的添加属性或方法</span></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''这是一个测试类，不实现任何功能'''</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_func</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''这个方法即将要添加到实例对象中'''</span></span><br><span class="line">    print(<span class="string">"----test_func----"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = TestClass()</span><br><span class="line">t.name = <span class="string">"name"</span></span><br><span class="line">print(t.name)</span><br><span class="line"><span class="comment"># 给实例对象添加的方法，类的其它实例对象无法使用</span></span><br><span class="line"><span class="comment"># 如果想其它实例对象也可使用该方法，应该讲方法添加给类</span></span><br><span class="line"><span class="comment"># TestClass.test_func = test_func </span></span><br><span class="line">t.test_func = MethodType(test_func, t) </span><br><span class="line">t.test_func()</span><br></pre></td></tr></table></figure><h2 id="通过-slots-限制实例对像"><a href="#通过-slots-限制实例对像" class="headerlink" title="通过 slots 限制实例对像"></a>通过 <strong>slots</strong> 限制实例对像</h2><p>Python 运行在定义 class 的时候，定义一个特殊的变量 <strong>slots</strong> ，来限制该 class 实例能添加的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = [<span class="string">"name"</span>, <span class="string">"age"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = TestClass()</span><br><span class="line">t.name = <span class="string">'lemontree'</span></span><br><span class="line">t.age = <span class="number">23</span></span><br><span class="line">t.addr = <span class="string">'LY'</span></span><br></pre></td></tr></table></figure><p>从运行结果来看，我们可以动态的添加 name 属性和 age 属性，但是当添加 addr 属性时就会报错（AttributeError）。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>slots</strong> 定义的属性仅对当前类实例起作用，对继承的子类是不起作用的。除非也在子类中定义 <strong>slots</strong> ，这样，子类实例允许定义的属性就是自身的 <strong>slots</strong> 加上父类的 <strong>slots</strong> 。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186739713011a09b63dcbd42cc87f907a778b3ac73000" target="_blank" rel="noopener">廖雪峰的官方网站（使用<strong>slots</strong>）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Python 是一门动态语言，当我们定义一个类，并创建了一个类的实例后，我们可以给该实例绑定任何属性和方法。然而某些情况下，我们并不想这样。
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>将hexo博客备份至GitHub</title>
    <link href="http://yoursite.com/2018/02/24/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%E8%87%B3github/"/>
    <id>http://yoursite.com/2018/02/24/将hexo博客备份至github/</id>
    <published>2018-02-25T03:11:34.000Z</published>
    <updated>2018-02-27T01:37:57.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用Hexo在github搭建的博客，github上仅仅只保存有Hexo生成的静态网页文件，而没有我们创建修改过的Hexo源文件。当我们换一台电脑，或者重装了系统时，我们就无法用我们之前创建的Hexo源文件修改博客了。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol><li>在github上创建新的仓库 Username.github.io，这个仓库将存储你的Hexo源文件和Hexo生成的博客静态页面。如果您之前有该重名文件（比如您之前用Hexo搭建过博客），请将其重命名或者删除（我们将重新生成博客并上传，抛弃您之前搭建的博客）；</li><li>创建两个分支：master 和 hexo （其中master分支用于存储静态网页文件，hexo用于存储hexo源文件）；</li><li>设置hexo为默认分支；</li><li>将刚刚创建的新仓库 <code>clone</code> 至本地，将之前你创建过的hexo源文件中的<code>_config.yml</code>、<code>themes/</code>、<code>source/</code>、<code>scaffolds/</code>、<code>package.json</code>和<code>.gitignore</code>复制至你刚刚克隆至本地的文件夹内；</li><li>将themes/next/（如果你下载并使用了其他hexo主题）中的<code>.git/</code>删除，否则将无法push主题文件夹；</li><li>在你克隆至本地的Username.github.io文件夹中执行<code>npm install</code>和<code>npm install hexo-deployer-git</code>（这里可以看一看分支是不是hexo）</li><li>执行<code>git add</code>、<code>git commit -m &quot;&quot;</code>、<code>git push origin hexo</code>来提交hexo网站源文件;</li><li>执行<code>hexo g -d</code>将生成的静态网页部署至GitHub上。<br>这样，Username.github.io仓库就有了master分支和hexo分支，分别保存静态网页和源文件。</li></ol><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>在本地对博客修改（包括修改主题样式、发布新文章等）后：</p><ol><li>依次执行<code>git add</code>、<code>git commit -m &quot;&quot;</code>和<code>git push origin hexo</code>来提交hexo网站源文件；</li><li>执行<code>hexo g -d</code>将生成的静态网页部署至GitHub上。</li></ol><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>重装电脑后，或者想在其它电脑上修改博客：</p><ol><li>安装git；</li><li>安装Node.js；</li><li>克隆远程仓科至本地；</li><li>在文件夹内执行以下命令<code>npm install hexo-cli -g</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>。</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://blog.csdn.net/top_code/article/details/51931916" target="_blank" rel="noopener">GitHub创建新分支</a></li><li><a href="https://blog.itswincer.com/posts/7efd2818/" target="_blank" rel="noopener"> Hexo 博客备份</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用Hexo在github搭建的博客，github上仅仅只保存有Hexo生成的静态网页文件，而没有我们创建修改过的Hexo源文件。当我们换一
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo主题相关</title>
    <link href="http://yoursite.com/2018/02/23/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2018/02/23/hexo更换主题/</id>
    <published>2018-02-23T10:55:42.000Z</published>
    <updated>2018-02-27T01:37:57.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步：如果已经有之前的bolg想换主题的话省去这步"><a href="#第一步：如果已经有之前的bolg想换主题的话省去这步" class="headerlink" title="第一步：如果已经有之前的bolg想换主题的话省去这步"></a>第一步：如果已经有之前的bolg想换主题的话省去这步</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog &amp;&amp; npm install</span><br></pre></td></tr></table></figure><h1 id="第二步：添加一些配置文件"><a href="#第二步：添加一些配置文件" class="headerlink" title="第二步：添加一些配置文件"></a>第二步：添加一些配置文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-renderer-jade hexo-renderer-scss hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><h1 id="第三步：克隆-下载-主题文件到本地"><a href="#第三步：克隆-下载-主题文件到本地" class="headerlink" title="第三步：克隆[下载]主题文件到本地"></a>第三步：克隆[下载]主题文件到本地</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/littlewin-wang/hexo-theme-casual themes/casual</span><br></pre></td></tr></table></figure><h1 id="第四步：修改配置文件的-theme关键字就好"><a href="#第四步：修改配置文件的-theme关键字就好" class="headerlink" title="第四步：修改配置文件的 theme关键字就好"></a>第四步：修改配置文件的 theme关键字就好</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: casual</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一步：如果已经有之前的bolg想换主题的话省去这步&quot;&gt;&lt;a href=&quot;#第一步：如果已经有之前的bolg想换主题的话省去这步&quot; class=&quot;headerlink&quot; title=&quot;第一步：如果已经有之前的bolg想换主题的话省去这步&quot;&gt;&lt;/a&gt;第一步：如果已经
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
